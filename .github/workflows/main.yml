name: CI/CD Pipeline for Dental Office Frontend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: dental-office/frontend
  EKS_CLUSTER_NAME: xavier-dental-cluster


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set ECR Registry URL and image tag
      run: |
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_FRONTEND }} || aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_FRONTEND }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

    - name: Update Kubernetes manifest
      run: |
        # Create k8s directory if it doesn't exist
        mkdir -p k8s
        
        # Create or update Kubernetes manifest
        cat > k8s/frontend-app.yaml << EOF
        ---
        apiVersion: v1
        kind: Namespace
        metadata:
          name: dental-app
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          namespace: dental-app
          name: frontend-config
        data:
          NODE_ENV: "production"
          NEXT_PUBLIC_API_URL: "${{ secrets.NEXT_PUBLIC_API_URL }}"
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          namespace: dental-app
          name: frontend-deployment
          annotations:
            kubernetes.io/change-cause: "Image updated to ${{ env.IMAGE_TAG }} by GitHub Actions"
        spec:
          selector:
            matchLabels:
              app: dental-frontend
          replicas: 2
          strategy:
            type: Recreate
          template:
            metadata:
              labels:
                app: dental-frontend
                version: "${{ env.IMAGE_TAG }}"
            spec:
              containers:
              - image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ env.IMAGE_TAG }}
                imagePullPolicy: Always
                name: frontend
                ports:
                - containerPort: 3000
                envFrom:
                - configMapRef:
                    name: frontend-config
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "100m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          namespace: dental-app
          name: frontend-service
        spec:
          ports:
            - port: 80
              targetPort: 3000
              protocol: TCP
          type: ClusterIP
          selector:
            app: dental-frontend
        
        EOF

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
    - name: Deploy to EKS
      run: |
        # Apply namespace and configmap first
        kubectl apply -f k8s/frontend-app.yaml -l '!app'
        
        # Delete the old deployment if it exists (for clean deployment)
        kubectl delete deployment frontend-deployment -n dental-app --ignore-not-found=true
        
        # Apply the new deployment
        kubectl apply -f k8s/frontend-app.yaml
        
    - name: Verify deployment
      run: |
        # Wait for the deployment to be ready with a timeout
        kubectl rollout status deployment/frontend-deployment -n dental-app --timeout=90s
        
        # Get pod status
        echo "Pod status:"
        kubectl get pods -n dental-app -l app=dental-frontend
        
        # Get pod logs if available
        echo "Pod logs:"
        POD_NAME=$(kubectl get pods -n dental-app -l app=dental-frontend -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
        if [ -n "$POD_NAME" ]; then
          kubectl logs -n dental-app $POD_NAME --tail=50
        else
          echo "No pods found yet"
        fi
        
    - name: Get Application Ingress URL
      run: |
        echo "Getting the shared ingress URL..."
        INGRESS_HOST=$(kubectl get ingress dental-app-ingress -n dental-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
        if [ -n "$INGRESS_HOST" ]; then
          echo "✅ Application is available at: http://$INGRESS_HOST"
          echo "✅ Frontend: http://$INGRESS_HOST"
          echo "✅ Backend API: http://$INGRESS_HOST/api"
          echo "✅ Health Check: http://$INGRESS_HOST/health"
          echo "APPLICATION_URL=http://$INGRESS_HOST" >> $GITHUB_ENV
        else
          echo "⚠️ Ingress address not found. Check ingress status:"
          kubectl get ingress -n dental-app
        fi
